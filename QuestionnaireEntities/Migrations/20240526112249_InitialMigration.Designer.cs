// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuestionnaireEntities;

#nullable disable

namespace QuestionnaireEntities.Migrations
{
    [DbContext(typeof(SurveyDbContext))]
    [Migration("20240526112249_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("QuestionnaireEntities.Entities.AnswerEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("question_id");

                    b.Property<string>("Response")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("response");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("IX_answer_question_id");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("QuestionId"), "hash");

                    b.ToTable("answers");
                });

            modelBuilder.Entity("QuestionnaireEntities.Entities.InterviewEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("From")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("from");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint")
                        .HasColumnName("survey_id");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId")
                        .HasDatabaseName("IX_interviews_survey_id");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SurveyId"), "hash");

                    b.ToTable("interviews");
                });

            modelBuilder.Entity("QuestionnaireEntities.Entities.QuestionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsMultiChoice")
                        .HasColumnType("boolean")
                        .HasColumnName("is_multi_choice");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_required");

                    b.Property<int>("PlaceInSurvey")
                        .HasColumnType("integer")
                        .HasColumnName("place_in_survey");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question");

                    b.Property<long>("SurveyId")
                        .HasColumnType("bigint")
                        .HasColumnName("survey_id");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId")
                        .HasDatabaseName("IX_questions_survey_id");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SurveyId"), "hash");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("QuestionnaireEntities.Entities.ResultEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AnswerId")
                        .HasColumnType("bigint")
                        .HasColumnName("answer_id");

                    b.Property<long>("InterviewId")
                        .HasColumnType("bigint")
                        .HasColumnName("interview_id");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId")
                        .HasDatabaseName("IX_results_answer_id");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("AnswerId"), "hash");

                    b.HasIndex("InterviewId")
                        .HasDatabaseName("IX_results_interview_id");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("InterviewId"), "hash");

                    b.ToTable("results");
                });

            modelBuilder.Entity("QuestionnaireEntities.Entities.SurveyEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("surveys");
                });

            modelBuilder.Entity("QuestionnaireEntities.Entities.AnswerEntity", b =>
                {
                    b.HasOne("QuestionnaireEntities.Entities.QuestionEntity", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuestionnaireEntities.Entities.InterviewEntity", b =>
                {
                    b.HasOne("QuestionnaireEntities.Entities.SurveyEntity", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("QuestionnaireEntities.Entities.QuestionEntity", b =>
                {
                    b.HasOne("QuestionnaireEntities.Entities.SurveyEntity", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("QuestionnaireEntities.Entities.ResultEntity", b =>
                {
                    b.HasOne("QuestionnaireEntities.Entities.AnswerEntity", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuestionnaireEntities.Entities.InterviewEntity", "Interview")
                        .WithMany()
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Interview");
                });

            modelBuilder.Entity("QuestionnaireEntities.Entities.QuestionEntity", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("QuestionnaireEntities.Entities.SurveyEntity", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
